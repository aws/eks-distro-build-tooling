// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/dependencyUpdater (interfaces: Dependency,Updater)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dependencyUpdater "github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/dependencyUpdater"
	gomock "github.com/golang/mock/gomock"
)

// MockDependency is a mock of Dependency interface.
type MockDependency struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyMockRecorder
}

// MockDependencyMockRecorder is the mock recorder for MockDependency.
type MockDependencyMockRecorder struct {
	mock *MockDependency
}

// NewMockDependency creates a new mock instance.
func NewMockDependency(ctrl *gomock.Controller) *MockDependency {
	mock := &MockDependency{ctrl: ctrl}
	mock.recorder = &MockDependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependency) EXPECT() *MockDependencyMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockDependency) Info() dependencyUpdater.DependencyInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(dependencyUpdater.DependencyInfo)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockDependencyMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDependency)(nil).Info))
}

// UpdateAll mocks base method.
func (m *MockDependency) UpdateAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockDependencyMockRecorder) UpdateAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockDependency)(nil).UpdateAll))
}

// Updaters mocks base method.
func (m *MockDependency) Updaters() []dependencyUpdater.Updater {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updaters")
	ret0, _ := ret[0].([]dependencyUpdater.Updater)
	return ret0
}

// Updaters indicates an expected call of Updaters.
func (mr *MockDependencyMockRecorder) Updaters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updaters", reflect.TypeOf((*MockDependency)(nil).Updaters))
}

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockUpdater) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdaterMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdater)(nil).Update))
}
