package cmd

import (
	"fmt"
	"time"

	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/github"
	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/repoContentManager"
	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/retrier"
	"github.com/spf13/cobra"
)

const (
	// Flag Names
	cveIdFlag              = "cveId"
	upstreamIssueIdFlag    = "upstreamIssueId"
	upstreamCommitHashFlag = "upstreamCommitHash"

	// Other constants
	issueAutocreatedTemplate   = "Issue was generated by eksGoTools createCveIssue, by:"
	eksGoOwner                 = "aws"
	eksGoRepo                  = "eks-distro-build-tooling"
	eksGoSupportedVersionsPath = "projects/golang/go/MAINTAINED_EOL_VERSIONS"
)

var (
	toplevelIssue      string
	cveId              string
	upstreamIssueUrl   string
	upstreamCommitHash string

	backportIssueCmd = &cobra.Command{
		Use:   "issue",
		Short: "Opens backport issues for top level github issue",
		Long:  `Opens issues to backport top level issue to EKS-Distro supported versions of Golang`,
		RunE: func(cmd *cobra.Command, args []string) error {

			retrier := retrier.New(time.Second*380, retrier.WithBackoffFactor(1.5), retrier.WithMaxRetries(15, time.Second*30))

			token, err := github.GetGithubToken()
			if err != nil {
				return fmt.Errorf("getting Github PAT from environment at variable %s: %v", github.PersonalAccessTokenEnvVar, err)
			}
			githubClient, err := github.NewClient(cmd.Context(), token)
			if err != nil {
				return fmt.Errorf("setting up Github client: %v", err)
			}

			// set up Repo Content Creator handler
			repoContentManagerOpts := &repoContentManager.Opts{
				SourceOwner: "rcrozean",
				SourceRepo:  "eks-distro-build-tooling",
			}
			rm := repoContentManager.New(retrier, githubClient, repoContentManagerOpts)

			gfOpts := &repoContentManager.GetFileOpts{
				Owner: "golang",
				Repo:  "go",
				Path:  eksGoSupportedVersionsPath,
				Ref:   nil,
			}

			test, err := rm.GetFile(cmd.Context(), gfOpts)
			if err != nil {
				return fmt.Errorf("getting file at %s: %v", gfOpts.Path, err)
			}
			fmt.Printf("test file: %v", test)
			return nil
		},
	}
)

func init() {
	backportCmd.AddCommand(backportIssueCmd)
}
