package cmd

import (
	"fmt"
	"strings"
	"time"

	"github.com/spf13/cobra"

	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/github"
	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/issueManager"
	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/retrier"
	"github.com/aws/eks-distro-build-tooling/tools/eksDistroBuildToolingOpsTools/pkg/version"
)

const (
	backportFlag              = "backport"
	announcementSourceUrlFlag = "announcementSourceUrl"
	announcementBodyFlag      = "announcementBody"
	issueAutocreatedTemplate  = "Issue was generated by eksGoTools createCveIssue, by:"
)

var (
	announcementSourceUrl string
	announcementBody      string

	createCveIssue = &cobra.Command{
		Use:   "createCveIssue [OPTIONS]",
		Short: "Create new top level CVE Issue",
		Long:  `Create a new top level CVE Issue in aws/eks-distro-build-tooling`,
		RunE: func(cmd *cobra.Command, args []string) error {

			owner := repositoryOwnerFlag
			repo := repositoryFlag
			//email := githubEmailFlag
			//prBranch := commitBranch
			//authorName := authorNameFlag

			title := "Title"
			label := []string{"security"}
			assignee := "rcrozean"
			state := "open"

			retrier := retrier.New(time.Second*380, retrier.WithBackoffFactor(1.5), retrier.WithMaxRetries(15, time.Second*30))

			token, err := github.GetGithubToken()
			if err != nil {
				return fmt.Errorf("getting Github PAT from environment at variable %s: %v", github.PersonalAccessTokenEnvVar, err)
			}
			githubClient, err := github.NewClient(cmd.Context(), token)
			if err != nil {
				return fmt.Errorf("setting up Github client: %v", err)
			}

			// set up PR Creator Handler
			//o := &prmanager.Opts{
			//	SourceOwner: owner,
			//	SourceRepo:  repo,
			//	PrRepo:      repo,
			//	PrRepoOwner: owner,
			//}
			// prCreator := prmanager.New(retrier, githubClient, o)

			// set up Issue Creator handler
			issueManagerOpts := &issueManager.Opts{
				SourceOwner: owner,
				SourceRepo:  repo,
			}
			im := issueManager.New(retrier, githubClient, issueManagerOpts)

			issueOpts := &issueManager.CreateIssueOpts{
				Title:    &title,
				Body:     GenerateIssueBody(),
				Labels:   &label,
				Assignee: &assignee,
				State:    &state,
			}

			issue, err := im.CreateIssue(cmd.Context(), issueOpts)
			if err != nil {
				return fmt.Errorf("creating issue: %v", err)
			}

			fmt.Printf("test: %v", issue.Body)

			return nil
		},
	}
)

func init() {
	rootCmd.AddCommand(createCveIssue)
	createCveIssue.Flags().BoolP(backportFlag, "b", true, "Create backport issue to all or specified EOL Supported Golang Version(s). All versions by default")
	createCveIssue.Flags().StringVar(&announcementSourceUrl, announcementSourceUrlFlag, "", "Announcement Source URL e.g. https://groups.google.com/g/golang-announce/c/-hjNw559_tE/m/KlGTfid5CAAJ")
	createCveIssue.Flags().StringVar(&announcementBody, announcementBodyFlag, "", "String for the body of the issue created")
}

func GenerateIssueBody() *string {
	b := strings.Builder{}
	if announcementSourceUrlFlag != "" {
		b.WriteString(fmt.Sprintf("From [Goland Security Announcemnt](%s)", announcementSourceUrl))
	}
	if announcementBodyFlag != "" {
		b.WriteString(fmt.Sprintf("\n`%s`", announcementBody))
	}
	b.WriteString("\n\n")
	b.WriteString(fmt.Sprintf("\n%s: %s", issueAutocreatedTemplate, authorNameFlag))
	b.WriteString(fmt.Sprintf("\nTool Version: `%s`", version.Get().GitVersion))

	bs := b.String()
	fmt.Printf("\n%s", bs)
	return &bs
}

func GenerateIssueTitle() *string {
	t := strings.Builder{}

	ts := t.String()
	return &ts
}
