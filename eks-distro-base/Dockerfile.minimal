# Copyright 2020 Amazon.com Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Using one multistage Dockerfile since we use buildkit in prow
# there is no image repo so building images that build on each other 
# is not supported, unless we do a multistage build like the following
# where the caching system can be used for subsequent target builds

# *NOTE* we have to limit our number of layers heres because in presubmits there
# is no overlay fs and we will run out of space quickly

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as builder

RUN yum upgrade -y && \
    yum update -y && \
    yum install -y yum-utils

ENV DOWNLOAD_DIR /tmp/download
ENV NEWROOT /newroot
ENV FAKE_INSTALLS bash glibc p11-kit p11-kit-trust

COPY scripts/ /usr/bin

WORKDIR $NEWROOT

# non root user
RUN mkdir -p $NEWROOT/home/nonroot && \
    chown 65532:65532 $NEWROOT/home/nonroot && \
    # tmp directory with correct permissions
    mkdir -p -m 1777 $NEWROOT/tmp

RUN set -x && \
    # setup rpm + yum
    clean_install system-release true && \
    # "install" excluded deps we do not want in final image
    clean_install "$FAKE_INSTALLS" true true && \
    clean_install "basesystem filesystem setup tzdata" && \    
    # postinstall scriptlet for ca-certs will fail, manually extract and copy
    # key files from host after running update-ca-trust
    clean_install ca-certificates true true true && \
    update-ca-trust && \
    cp -rf /etc/pki $NEWROOT/etc && \
    remove_package "$FAKE_INSTALLS" true && \    
    cleanup "base"

COPY files/ $NEWROOT


################# BASE ########################
FROM scratch as base
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
USER 0

COPY --from=builder /newroot /


################# BASE-NONROOT ################
FROM base as base-nonroot
USER 65532


################# GLIBC ####################
FROM builder as glibc-builder

RUN set -x && \
    # let yum install bash since it will be needed for scriptlets
    # will be removed along with its deps at the end
    clean_install glibc && \
    # this is provided in minimal base, glibc brings its own, remove it
    rm etc/nsswitch.conf.rpmnew && \
    # remove bash and deps (ncurses)
    remove_package bash && \
    cleanup "glibc"


FROM base as base-glibc
COPY --from=glibc-builder /newroot /


################# IPTABLES ####################
FROM glibc-builder as iptables-builder

RUN set -x && \
    # manually "install" systemd to avoid installing the entire dep tree
    clean_install systemd true true && \
    # following are from coreutils needed by install scriptlets
    for cmd in "readlink" "rm"; do cp /usr/bin/$cmd $NEWROOT/usr/bin/; done && \
    clean_install "conntrack-tools ebtables ipset iptables iptables-nft kmod" && \
    for cmd in "readlink" "rm"; do rm $NEWROOT/usr/bin/$cmd; done && \
    # remove bash + systemd and deps
    remove_package systemd true && \
    remove_package bash && \
    cleanup "iptables"


FROM base-glibc as base-iptables
COPY --from=iptables-builder /newroot /

# AL2 doesn't setup the ip6tables alternative the same as ubuntu/debian
# which is what the iptables-wrapper script provided by kubernetes expects
# since kind's entrypoint assumes this adding the alternative
# adding the alternative for ip6tabels here so the --set calls would work later on as expected
# https://github.com/kubernetes/release/blob/master/images/build/debian-iptables/buster/iptables-wrapper
RUN ["update-alternatives", \
	    "--install", "/usr/sbin/ip6tables", "ip6tables", "/usr/sbin/ip6tables-legacy", "10", \
        "--slave", "/usr/sbin/ip6tables-restore", "ip6tables-restore", "/usr/sbin/ip6tables-restore-legacy", \
        "--slave", "/usr/sbin/ip6tables-save", "ip6tables-save", "/usr/sbin/ip6tables-save-legacy"]

RUN ["update-alternatives", \
	    "--install", "/usr/sbin/ip6tables", "ip6tables", "/usr/sbin/ip6tables-nft", "10", \
        "--slave", "/usr/sbin/ip6tables-restore", "ip6tables-restore", "/usr/sbin/ip6tables-restore-nft", \
        "--slave", "/usr/sbin/ip6tables-save", "ip6tables-save", "/usr/sbin/ip6tables-save-nft"]



################# DOCKER CLIENT ####################
FROM glibc-builder as docker-client-builder

RUN set -x && \
    # we only want the docker client cli and not the service
    # installing the package one off since the only deps of the client
    # are already provided by glibc
    amazon-linux-extras enable docker && \
    # has to be extracted instead of installed to work around scriptlet
    # issue that only affects the service component which we arent using
    clean_install docker true true true && \
    rm $NEWROOT/usr/bin/docker-* && \
    rm $NEWROOT/usr/bin/dockerd && \
    cleanup "docker"


FROM base-glibc as base-docker-client
COPY --from=docker-client-builder /newroot /


################# GIT ####################
FROM glibc-builder as git-builder

ARG TARGETARCH

ENV CMAKE_VERSION=3.20.2
ENV LIBSSH2_VERSION=1.9.0
ENV LIBGIT2_VERSION=1.1.0
ENV BUILD_DEPS="gcc gzip install make openssl-devel openssl-libs tar wget"

COPY "${TARGETARCH}-git-checksums" /tmp/checksums

RUN set -x && \
    export TARGETARCH="${TARGETARCH/amd64/x86_64}" && \
    export TARGETARCH="${TARGETARCH/arm64/aarch64}" && \
    # manually "install" systemd to avoid installing the entire dep tree
    # git deps on less, which we wont be using in the image
    # do not need openssh, just the clients for git to fork (ssh)
    # rpm and sqlite come from openlbdap/nss but we only need the libs
    clean_install "less openssh rpm sqlite systemd" true true && \
    clean_install "git-core libssh2 openssh-clients openssl-libs gnupg" && \
    remove_package "less openssh rpm sqlite systemd" true && \
    # we are keeping bash on this image since downstream images use to exec git
    remove_package "coreutils findutils gawk grep info sed" && \    
    # building libgit2 + libssh2
    mkdir -p /tmp/sources && \
    cd /tmp/sources && \
    yum install -y $BUILD_DEPS && \
    wget \
        --progress dot:giga \
        https://github.com/libssh2/libssh2/releases/download/libssh2-${LIBSSH2_VERSION}/libssh2-${LIBSSH2_VERSION}.tar.gz && \
    wget \
        --progress dot:giga \
        https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-${TARGETARCH}.tar.gz && \
    wget \
        --progress dot:giga \ 
        https://github.com/libgit2/libgit2/releases/download/v${LIBGIT2_VERSION}/libgit2-${LIBGIT2_VERSION}.tar.gz && \
    sha256sum -c /tmp/checksums && \
    # al2 provided libssh is out of date and does not work with ssh/github
    tar -xzf libssh2-${LIBSSH2_VERSION}.tar.gz && \
    cd  /tmp/sources/libssh2-${LIBSSH2_VERSION} && \
    ./configure --disable-static --enable-shared --prefix=/usr --libdir=/usr/lib64 && \
    make && \
    make install && \
    mkdir -p $NEWROOT/usr/share/doc/libssh2-${LIBSSH2_VERSION}/ && \
    cp ./COPYING $NEWROOT/usr/share/doc/libssh2-${LIBSSH2_VERSION}/ && \
    cp -d /usr/lib64/libssh2* $NEWROOT/usr/lib64 && \
    # CMAKE for libgit build
    cd /tmp/sources && \
    tar -xzf cmake-${CMAKE_VERSION}-linux-${TARGETARCH}.tar.gz && \
    mv cmake-${CMAKE_VERSION}-linux-${TARGETARCH}/bin/* /usr/bin && \
    mkdir /usr/share/cmake-3.20 && \
    mv cmake-${CMAKE_VERSION}-linux-${TARGETARCH}/share/cmake-3.20/* /usr/share/cmake-3.20 && \
    # Install Libgit2
    cd /tmp/sources && \
    tar -xzf libgit2-${LIBGIT2_VERSION}.tar.gz && \
    cd /tmp/sources/libgit2-${LIBGIT2_VERSION} && \
    mkdir build && \
    cd build && \
    cmake -DBUILD_CLAR=off -DCMAKE_BUILD_TYPE=Release .. && \
    cmake --build  . && \
    cmake --install . && \
    mkdir -p $NEWROOT/usr/share/doc/libgit2-${LIBGIT2_VERSION}/ && \
    cp ../COPYING $NEWROOT/usr/share/doc/libgit2-${LIBGIT2_VERSION} && \
    cp -d /usr/local/lib64/libgit2* $NEWROOT/usr/lib64 && \
    # Since downstream of this image we need to build libgit2 we need the headers and pc files
    mkdir -p $NEWROOT/usr/lib64/pkgconfig && \
    mkdir -p $NEWROOT/usr/include && \
    cp /usr/local/lib64/pkgconfig/libgit2* $NEWROOT/usr/lib64/pkgconfig && \
    cp /usr/lib64/pkgconfig/* $NEWROOT/usr/lib64/pkgconfig && \
    cp -rf /usr/local/include/git2* $NEWROOT/usr/include && \
    cd / && \
    rm -rf /tmp/sources && \
    yum erase -y "$BUILD_DEPS" && \
    cleanup "git"


FROM base-glibc as base-git
COPY --from=git-builder /newroot /


################# CSI ####################
# This image is not exactly minimal. CSI drivers require a number
# of utils to create and manage volumes
# Adding this as a variant here to ensure we are keeping it up to date
FROM glibc-builder as csi-builder

RUN set -x && \
    # manually "install" systemd to avoid installing the entire dep tree
    clean_install systemd true true && \
    # some of the install scriptlets need coreutils but the dep ordering
    # doesnt reflect, install manually to make sure its first
    clean_install coreutils && \
    clean_install "e2fsprogs nfs-utils util-linux xfsprogs" && \
    remove_package systemd true && \
    cleanup "csi"


FROM base-glibc as base-csi
COPY --from=csi-builder /newroot /

FROM scratch as base-export
COPY --from=builder /tmp/packages/* .

FROM scratch as base-nonroot-export
COPY --from=builder /tmp/packages/* .

FROM scratch as base-glibc-export
COPY --from=glibc-builder /tmp/packages/* .

FROM scratch as base-iptables-export
COPY --from=iptables-builder /tmp/packages/* .

FROM scratch as base-csi-export
COPY --from=csi-builder /tmp/packages/* .

FROM scratch as base-git-export
COPY --from=git-builder /tmp/packages/* .

FROM scratch as base-docker-client-export
COPY --from=docker-client-builder /tmp/packages/* .
