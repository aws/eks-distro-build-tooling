# Copyright 2020 Amazon.com Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Using one multistage Dockerfile since we use buildkit in prow
# there is no image repo so building images that build on each other 
# is not supported, unless we do a multistage build like the following
# where the caching system can be used for subsequent target builds

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as builder

RUN yum upgrade -y && \
    yum update -y && \
    yum install -y yum-utils

ENV DOWNLOAD_DIR /tmp/download

# there is a post install script for ca-certificates handled down below
# there is a post install script for setup, it appears to just remove temp files
RUN yumdownloader --destdir=$DOWNLOAD_DIR \    
    ca-certificates \
    setup \
    system-release \
    tzdata

WORKDIR /newroot

RUN for rpm in $DOWNLOAD_DIR/*.rpm; do rpm2cpio $rpm | cpio -idmv; done && \
    rm -rf usr/share/man usr/share/doc && \
    mkdir -p /newroot/{bin,boot,lib,root,run,sbin,var} && \
    mkdir -p /newroot/var/{backups,cache,lib,local,lock,log,run,spool,tmp} && \
    # cert files created by post install of ca-certs
    cp -rf /etc/pki/ca-trust/extracted /newroot/etc/pki/ca-trust

# non root user
RUN mkdir -p /newroot/home/nonroot && \
    chown 65532:65532 /newroot/home/nonroot

# tmp directory with correct permissions
RUN mkdir -p -m 1777 /newroot/tmp

COPY files/ /newroot

# Generate rpm db so image scanners can detect out of date packages
RUN rpm --initdb --dbpath /newroot/var/lib/rpm && \
    rpm -ivh --nodeps --justdb --dbpath /newroot/var/lib/rpm $DOWNLOAD_DIR/*.rpm && \
    rpm --dbpath /newroot/var/lib/rpm -qa | sort


################# BASE ########################
FROM scratch as base
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
COPY --from=builder /newroot /


################# BASE-NONROOT ################
FROM base as base-nonroot
USER 65532


################# IPTABLES ####################
FROM builder as iptables-builder

ENV DOWNLOAD_DIR /tmp/download-iptables
WORKDIR $DOWNLOAD_DIR

COPY --from=base var/lib/rpm /newroot/var/lib/rpm

RUN repotrack -p $DOWNLOAD_DIR \
    ipset iptables kmod \
    # Needed for conntrack-tools
    libnetfilter_conntrack libnetfilter_cthelper libnetfilter_cttimeout libnetfilter_queue && \
    # ebtables + conntrack-tools has a dep on systemd, which we do not need
    # download them seperate and do not resolve dependencies
    # deps are all downloaded above
    yumdownloader --destdir=$DOWNLOAD_DIR ebtables conntrack-tools && \
    # repotrack/yumdownloader will download multiple arch packages
    rm -f *i686.rpm && \
    # handled by minimal base
    rm basesystem-* filesystem-* setup-* system-release-* tzdata* && \
    # bash is a dep of glibc/common, but we do not want it in the image
    rm bash-* ncurses-* && \
    # chkconfig is used for update-alternatives whichw we do not need
    rm chkconfig-*

# not a perfect check, but sanity check to make sure we have downloaded
# "all" deps except systemd
# not perfect because a number of packages are already installed in the default image
RUN yum install -y systemd && \
    yum localinstall -y $DOWNLOAD_DIR/*

WORKDIR /newroot

RUN for rpm in $DOWNLOAD_DIR/*.rpm; do rpm2cpio $rpm | cpio -idmv; done && \
    rm -rf usr/share/man usr/share/doc && \
    # this is provided in minimal base, glibc brings its own, remove it
    rm etc/nsswitch.conf

# Simulate update-alternatives
RUN cd usr/sbin && \
    ln -s ip6tables-legacy ip6tables && \
    ln -s ip6tables-legacy-restore ip6tables-restore && \
    ln -s ip6tables-legacy-save ip6tables-save && \
    ln -s iptables-legacy iptables && \
    ln -s iptables-legacy-restore iptables-restore && \
    ln -s iptables-legacy-save iptables-save

# Generate rpm db so image scanners can detect out of date packages
RUN rpm -ivh --nodeps --justdb --dbpath /newroot/var/lib/rpm $DOWNLOAD_DIR/*.rpm && \
    rpm --dbpath /newroot/var/lib/rpm -qa | sort


FROM base as base-iptables
COPY --from=iptables-builder /newroot /
